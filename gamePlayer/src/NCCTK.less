.colorCalculations {
	--general-bg: hsl(var(--theme-color-huesat) 20%);
	--secondary-bg: hsl(var(--theme-color-huesat) 13%);
	--page-bg-brightness: 40%;
	--page-bg-darker-color: hsl(
		var(--theme-color-huesat) calc(var(--page-bg-brightness) * 100 / 125)
	);
	--page-bg-lighter-color: hsl(
		var(--theme-color-huesat) calc(var(--page-bg-brightness) * 125 / 100)
	);
	--background-gradient: linear-gradient(
		to top left,
		var(--page-bg-darker-color),
		var(--page-bg-lighter-color)
	);
	color: var(--text-color);
}

body {
	font-family: sans-serif;
	--theme-color-huesat: 212deg 70%;
	.colorCalculations();
	--text-color: hsl(0, 0%, 85%);
	--text-color-disabled: hsl(0, 0%, 40%);
	--icon-color: var(--text-color);
	--timer-bg: #000000;
	--time-unknown: hsl(210, 100%, 50%);
	--time-better: hsl(120, 100%, 25%);
	--time-worse: hsl(0, 100%, 40%);
	--standard-tile-size: 32px;
	&.gameBody {
		margin: 0;
		display: flex;
		flex-direction: row;
		width: 100vw;
		height: 100vh;
		background: var(--background-gradient);
		overflow: none;
	}
}

// TODO Come up with a better color for links
a {
	color: var(--text-color);
}

// Non-firefox custom scrollbar

::-webkit-scrollbar {
	background: var(--general-bg);
	width: 0.5em;
}
::-webkit-scrollbar-thumb {
	background: var(--secondary-bg);
}

// Firefox scrollbar

body {
	scrollbar-color: var(--secondary-bg) transparent;
	scrollbar-width: 0.5em;
}

.container {
	border-radius: 5px;
	background: var(--general-bg);
	padding: 0.6em 0.75em;
}

dialog {
	.container();
	padding: 0;
	border-width: 1px;
	color: var(--text-color);
	&[open] {
		display: flex;
		flex-direction: column;
	}
	min-width: 33vw;
	max-width: 75vw;
	max-height: 75vh;
	&::backdrop {
		background-color: #0008;
	}
	header,
	footer {
		padding: 0.5em;
		background: var(--secondary-bg);
	}
	section {
		overflow: auto;
	}
	footer {
		display: flex;
		justify-content: flex-end;
		gap: 0.5em;
		button {
			height: 2em;
		}
	}
	// Prevent a REALLY annoying layout problem where a dialog doesn't get
	// overrflow set correctly due to the extra form layer
	form[method="dialog"] {
		display: contents;
	}
}

.tableBorderRadius(@radius) {
	&:first-child {
		border-top-left-radius: @radius;
		border-bottom-left-radius: @radius;
	}
	&:last-child {
		border-top-right-radius: @radius;
		border-bottom-right-radius: @radius;
	}
}

table {
	width: 100%;
	border-spacing: 0;

	thead {
		position: sticky;
		top: 0;
		height: 2.3em;
		background: var(--general-bg);
		th {
			border-bottom: solid 1px white;
			.tableBorderRadius(5px);
		}
	}
	tbody {
		tr {
			&:hover {
				background: var(--secondary-bg);
			}
			cursor: pointer;
			td {
				input[type="radio"] {
					display: block;
					margin-left: auto;
					margin-right: auto;
				}
				padding: 0.5em;
				&.levelN {
					text-align: right;
				}
				.tableBorderRadius(5px);
			}
		}
	}
	tfoot {
		position: sticky;
		bottom: 0;
		height: 2.3em;
		background: var(--general-bg);
		td {
			border-top: solid 1px white;
			.tableBorderRadius(5px);
			border-bottom-right-radius: 0px !important;
			border-bottom-left-radius: 0px !important;
		}
	}
}

#addTilesetButton {
	margin-right: 1em;
	margin-left: auto;
	margin-top: 0.5em;
	margin-bottom: 0.5em;
	display: block;
}

.removeTilesetButton {
	display: block;
}

.tsetPreviewCanvas {
	width: calc(5 * var(--standard-tile-size));
}

dialog.textDialog section {
	padding-left: 1em;
	padding-right: 1em;
	.small {
		font-size: 0.8em;
	}
}

#aboutDialog section {
	ul li {
		margin-top: 0.5em;
	}
}

#themeSelectorDialog .preferences {
	margin-top: 1em;
}

.expandTriangle {
	display: inline-block;
	&::before {
		content: "▶";
	}
	&.open::before {
		content: "▼";
	}
}

#allAttemptsDialog section {
	display: flex;
	flex-direction: column;
	> * {
		padding: 1em;
		cursor: pointer;
		&:hover,
		&:focus-visible {
			background: var(--secondary-bg);
		}
		.firstLine,
		&.failed {
			display: flex;
			gap: 1em;
			flex-direction: row;
			.expandTriangle {
				margin-right: -0.5em;
			}
			.time {
				margin-left: auto;
				font-size: 0.75em;
				align-self: center;
			}
		}
		&.successful .extraInfo {
			padding-top: 0.5em;
			display: none;
			&.showExtra {
				display: block;
			}
		}
	}
	&:empty::before {
		padding-left: 1em;
		padding-top: 0.5em;
		padding-bottom: 0.5em;
		content: "No attempts yet!";
	}
}

.preferences {
	display: grid;
	grid: auto-flow / auto auto;
	gap: 0.5em;
	margin-right: 1em;
	margin-bottom: 1em;
	h3,
	p {
		grid-column-end: span 2;
		margin-top: 0.3em;
		margin-bottom: 0.3em;
		&:first-child {
			margin-top: 0.75em;
		}
	}
	p {
		font-size: 0.8em;
		width: 70%;
	}
}

button.themeButton {
	.colorCalculations();
	padding: 0.2em;
	.themeCircle {
		width: 1.3em;
		height: 1.3em;
		border-radius: 50%;
		background: var(--background-gradient);
		border: solid 0.25em var(--text-color);
	}
}

.closedPage {
	display: none !important;
}

button {
	--button-high-color: hsl(var(--theme-color-huesat) 40%);
	--button-low-color: hsl(var(--theme-color-huesat) 33%);
	color: var(--text-color);
	padding: 0 0.4em;
	border-width: 2px;
	border-style: solid;
	border-color: var(--button-high-color) var(--button-low-color)
		var(--button-low-color) var(--button-high-color);
	border-radius: 2px;
	background-image: linear-gradient(
		to bottom,
		var(--button-high-color),
		var(--button-low-color)
	);
	&:enabled {
		&:hover {
			--button-high-color: hsl(var(--theme-color-huesat) 45%);
			--button-low-color: hsl(var(--theme-color-huesat) 38%);
		}
		&:active {
			--button-high-color: hsl(var(--theme-color-huesat) 30%);
			--button-low-color: hsl(var(--theme-color-huesat) 23%);
		}
	}
	&:disabled {
		--button-high-color: hsl(var(--theme-color-huesat) 20%);
		--button-low-color: hsl(var(--theme-color-huesat) 13%);
		color: var(--text-color-disabled);
	}
	user-select: none;
}

/* Tooltip */

.tooltipRoot {
	width: fit-content;
	transform-origin: 10px 10px;
	display: flex;
	opacity: 0.9;
	animation: openTooltip 0.75s cubic-bezier(0.2, 0, 0.2, 1) forwards;
	position: absolute;
	left: 110%;
	top: 35%;
	z-index: 100;
	user-select: none;

	.tooltipBox {
		.container();
		flex-shrink: 0;
		backdrop-filter: blur(3px);
	}
	.tooltipTriangle {
		width: 0;
		height: 0;
		backdrop-filter: blur(3px);

		display: inline-block;
		border: solid 10px transparent;
		border-right: solid 10px var(--general-bg);
		position: relative;
		top: 5px;
		margin-right: -1px;
	}
}

@keyframes openTooltip {
	from {
		transform: scale(40%);
		opacity: 0;
	}

	50% {
		opacity: 0.9;
	}

	100% {
		opacity: 0.9;
		transform: scale(100%);
	}
}
@keyframes closeTooltip {
	from {
		opacity: 0.9;
		transform: scale(100%);
	}

	50% {
		opacity: 0;
	}

	to {
		opacity: 0;
		transform: scale(40%);
	}
}
.buttonTooltipBox {
	display: flex;
	flex-direction: column;
	row-gap: 0.5em;

	hr {
		margin: 0;
	}

	.buttonTooltipRow {
		display: flex;
		flex-direction: row;
		padding: 0.2em 0.5em;
		border-radius: 3px;
		&:focus-visible {
			outline: none;
		}
		&:not([data-disabled]) {
			cursor: pointer;
			&:hover,
			&:focus-visible {
				background: var(--secondary-bg);
			}
		}
		&[data-disabled] {
			color: var(--text-color-disabled);
		}

		.buttonTooltipKey {
			padding-left: 2em;
			margin-left: auto;
			padding-bottom: 0.2em;
		}
	}
}
/* Copied wholesale from https://github.com/eevee/lexys-labyrinth/ */
kbd {
	padding: 0 0.25em;
	border: 1px solid currentColor;
	border-radius: 0.25em;
	box-shadow: 0 2px 0 currentColor;
	text-align: center;
	text-transform: uppercase;
	width: fit-content;
}

/* The sidebar */

.sidebar {
	border-radius: 0px;
	padding: 0;
	width: 8em;
	height: 100%;
	display: flex;
	flex-direction: column;
	.sidebarButton {
		margin: 1em;
		display: flex;
		position: relative;
		img,
		.levelIconContainer {
			width: 80%;
			user-select: none;
			margin: auto;
			display: block;
			cursor: pointer;
		}
		// The level button, which has a dynamic number in it
		.levelIconContainer {
			position: relative;
			img {
				width: 100%;
			}
			#levelIconText {
				position: absolute;
				top: 25%;
				height: 35%;
				left: 12%;
				width: 75%;
				font-size: 2em;
				color: var(--icon-color);
				text-align: center;
				user-select: none;
				pointer-events: none;
			}
		}
	}

	.bottomButton {
		margin-top: auto;
	}
}

#loadingPage {
	width: fit-content;
	height: fit-content;
	margin: auto;
	p {
		font-style: italic;
	}
}

/* The game player */

.playerPage {
	--base-tile-size: 32px;
	--tile-scale: 2;
	--tile-size: calc(var(--base-tile-size) * var(--tile-scale));
	--quarter-tile: calc(var(--tile-size) / 4);
	.stats {
		grid-area: stats;
		display: grid;
		grid-template-columns: auto auto;
		grid-template-rows: repeat(auto-fill, 1em);
		gap: var(--quarter-tile);
		padding: var(--quarter-tile);
		padding-bottom: 0;
		font-size: 1.2em;
		white-space: nowrap;
		output {
			text-align: right;
		}
	}
	.viewportArea {
		grid-area: viewport;
		position: relative;
		width: calc(var(--tile-size) * var(--level-camera-width));
		height: calc(var(--tile-size) * var(--level-camera-height));
	}
	.viewportCanvas {
		width: 100%;
		height: 100%;
	}
	.inventoryCanvas {
		grid-area: inventory;
		margin: auto;
		width: calc(var(--tile-size) * 4);
		height: calc(var(--tile-size) * 2);
		background-color: azure;
	}
}

#levelPlayerPage {
	padding: var(--quarter-tile);
	border-radius: 5px;
	margin: auto;
	display: grid;
	gap: var(--quarter-tile);
	grid-template:
		"viewport stats" min-content
		"viewport inventory" min-content
		"viewport hint" 1fr
		/ min-content min-content;
	&.solutionPlayback {
		background: repeating-linear-gradient(
				45deg,
				transparent 0%,
				transparent 10%,
				#ff0b 10%,
				#ff0b 20%
			),
			var(--general-bg);
	}
	#hintBox {
		grid-area: hint;
		background-color: var(--secondary-bg);
		padding: 0.5em 0.5em;
	}
}

canvas {
	image-rendering: optimizeSpeed;
	image-rendering: -moz-crisp-edges;
	image-rendering: -webkit-crisp-edges;
	image-rendering: pixelated;
	image-rendering: crisp-edges;
}

/* Viewport overlay */

#levelViewportOverlay {
	width: 100%;
	height: 100%;
	position: absolute;
	top: 0;
	display: grid;
	gap: 0px 0px;
	grid-template:
		". . ." var(--tile-size)
		". top ." var(--tile-size)
		". . ." 0.5fr
		". middle ." 1fr
		". . ." 0.5fr
		". bottom ." calc(var(--tile-size) * 1.5)
		". . ." calc(var(--tile-size) * 0.75)
		/ 0.15fr 2.7fr 0.15fr;
	h3.deathOnly,
	h3.timeoutOnly {
		display: none;
	}
	&[data-game-state="won"] {
		background-image: radial-gradient(#4406, #660d);
		#overlayWinContents {
			display: contents;
		}
	}
	&[data-game-state="timeout"] {
		background-image: radial-gradient(#0084, #0088);
		#overlayLoseContents {
			display: contents;
			h3.timeoutOnly {
				display: initial;
			}
		}
	}
	&[data-game-state="death"] {
		background-image: radial-gradient(#1004, #2008);
		#overlayLoseContents {
			display: contents;
			h3.deathOnly {
				display: initial;
			}
		}
	}
	&[data-paused] {
		background: var(--general-bg);
		#overlayPauseContents {
			display: contents;
			.container {
				background: var(--secondary-bg);
			}
			h4 {
				margin-top: 0.3em;
				margin-bottom: 0.7em;
			}
		}
	}
	&[data-preplay] {
		background-image: radial-gradient(#0002, #0004);
		#overlayPreplayContents {
			display: contents;
		}
	}
	&[data-nonlegal] {
		background-image: repeating-conic-gradient(#0005 0%, #0008 5%, #0005 10%),
			radial-gradient(transparent, black);
		#overlayNonlegalContents {
			display: contents;
		}
	}
	&[data-gz] {
		background-image: radial-gradient(transparent, var(--general-bg) 70%),
			repeating-radial-gradient(#f00, #ff0, #0f0, #0ff, #00f, #f0f, #f00 30%);
		background-position-x: 50%;
		background-position-y: 80%;
		background-size: 200% 200%;

		#overlayGzContents {
			display: contents;
		}
	}
	> * {
		display: none;
		h3 {
			grid-area: top;
			text-align: center;
			font-size: 300%;
			margin: 0;
			text-shadow: black 1px 0px 10px;
		}
		.statsContainer {
			grid-area: middle;
			padding: var(--quarter-tile);
			&.small {
				width: fit-content;
				height: fit-content;
				justify-self: center;
			}
		}
		.buttonContainer {
			box-sizing: border-box;
			justify-content: stretch;
			grid-area: bottom;
			gap: var(--quarter-tile);
			padding: var(--quarter-tile);
			height: 100%;
			display: flex;
			flex-direction: row;
			button {
				flex: 1;
				font-size: 120%;
			}
		}
	}
}

#exaPlayerPage {
	display: grid;
	margin: auto;
	gap: var(--quarter-tile);
	grid-template:
		"viewport info" auto
		"viewport moves" 1fr
		/ min-content min-content;
	.infoContainer {
		grid-area: info;
		display: flex;
		flex-direction: row;
		gap: var(--tile-size);
		width: calc(16 * var(--tile-size));
		box-sizing: border-box;
		padding: calc(2 * var(--quarter-tile));
	}
	.viewportContainer {
		grid-area: viewport;
		padding: calc(2 * var(--quarter-tile));
	}
	.movesContainer {
		height: 0;
		min-height: 100%;
		box-sizing: border-box;
		.movesArea {
			.container();
			overflow-y: auto;
			width: 100%;
			height: 100%;
			resize: none;
			border: 0;
			padding: 0;
			background-color: var(--secondary-bg);
			font-family: monospace;
			word-break: break-all;
		}
		grid-area: moves;
	}
}

/* Set selector (stub) */

#setSelectorPage {
	overflow-y: auto;
	flex: 1;
	padding: 1em;
	display: flex;
	flex-direction: column;
	align-items: center;
	header {
		width: fit-content;
		margin-top: 1em;
		margin-bottom: 1em;
		display: grid;
		grid:
			"image  title  "
			"image  tagline";
		gap: 0 1em;
		img {
			grid-area: image;
		}
		h1,
		p {
			margin: 0;
			height: 1em;
		}
		h1 {
			grid-area: title;
			font-weight: normal;
			font-size: 8em;
		}
		p {
			grid-area: tagline;
			justify-self: center;
			font-size: 1.07em;
		}
	}

	#fileLoaderBar {
		width: 100%;
		align-self: center;
		box-sizing: border-box;
		display: grid;
		grid:
			"text text" min-content
			"file dirs" 1fr
			/ 1fr 1fr;
		p {
			grid-area: text;
			margin: 0;
			margin-bottom: 0.25em;
			font-size: 1.5em;
		}
		button {
			height: 4em;
		}
		gap: 0 0.5em;
	}
	#setList {
		display: grid;
		justify-content: center;
		width: 90%;
		gap: 1em;
		grid: auto-flow / repeat(
				auto-fit,
				calc(var(--standard-tile-size) * 10 + 0.75em * 2)
			);
		li {
			list-style: none;
			height: fit-content;
			.setThumbnail {
				width: calc(var(--standard-tile-size) * var(--camera-width));
				height: calc(var(--standard-tile-size) * var(--camera-height));
				margin: auto;
				canvas,
				img {
					width: 100%;
					height: 100%;
					object-fit: contain;
				}
			}
			cursor: pointer;
			&:hover,
			&:focus-visible {
				background: var(--secondary-bg);
			}
		}
	}
}
